//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Example.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IPetController
    {

        /// <summary>
        /// Add a new pet to the store
        /// </summary>

        /// <param name="body">Pet object that needs to be added to the store</param>

        System.Threading.Tasks.Task AddPetAsync(Pet body);

        /// <summary>
        /// Update an existing pet
        /// </summary>

        /// <param name="body">Pet object that needs to be added to the store</param>

        System.Threading.Tasks.Task UpdatePetAsync(Pet body);

        /// <summary>
        /// Finds Pets by status
        /// </summary>

        /// <param name="status">Status values that need to be considered for filter</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pet>> FindPetsByStatusAsync(System.Collections.Generic.IEnumerable<Anonymous> status);

        /// <summary>
        /// Finds Pets by tags
        /// </summary>

        /// <param name="tags">Tags to filter by</param>

        /// <returns>successful operation</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pet>> FindPetsByTagsAsync(System.Collections.Generic.IEnumerable<string> tags);

        /// <summary>
        /// Find pet by ID
        /// </summary>

        /// <param name="petId">ID of pet to return</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Pet> GetPetByIdAsync(long petId);

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>

        /// <param name="petId">ID of pet that needs to be updated</param>

        /// <param name="name">Updated name of the pet</param>

        /// <param name="status">Updated status of the pet</param>

        System.Threading.Tasks.Task UpdatePetWithFormAsync(long petId, string name, string status);

        /// <summary>
        /// Deletes a pet
        /// </summary>


        /// <param name="petId">Pet id to delete</param>

        System.Threading.Tasks.Task DeletePetAsync(string api_key, long petId);

        /// <summary>
        /// uploads an image
        /// </summary>

        /// <param name="petId">ID of pet to update</param>

        /// <param name="additionalMetadata">Additional data to pass to server</param>

        /// <param name="file">file to upload</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<ApiResponse> UploadFileAsync(long petId, string additionalMetadata, FileParameter file);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api/v1/")]

    public partial class PetController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IPetController _implementation;

        public PetController(IPetController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet", Name = "addPet")]
        public System.Threading.Tasks.Task AddPet([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Pet body)
        {

            return _implementation.AddPetAsync(body);
        }

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("pet", Name = "updatePet")]
        public System.Threading.Tasks.Task UpdatePet([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Pet body)
        {

            return _implementation.UpdatePetAsync(body);
        }

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/findByStatus", Name = "findPetsByStatus")]
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pet>> FindPetsByStatus([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Collections.Generic.IEnumerable<Anonymous> status)
        {

            return _implementation.FindPetsByStatusAsync(status);
        }

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <param name="tags">Tags to filter by</param>
        /// <returns>successful operation</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/findByTags", Name = "findPetsByTags")]
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Pet>> FindPetsByTags([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Collections.Generic.IEnumerable<string> tags)
        {

            return _implementation.FindPetsByTagsAsync(tags);
        }

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <param name="petId">ID of pet to return</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/{petId}", Name = "getPetById")]
        public System.Threading.Tasks.Task<Pet> GetPetById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long petId)
        {

            return _implementation.GetPetByIdAsync(petId);
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet</param>
        /// <param name="status">Updated status of the pet</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet/{petId}", Name = "updatePetWithForm")]
        public System.Threading.Tasks.Task UpdatePetWithForm([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long petId, string name, string status)
        {

            return _implementation.UpdatePetWithFormAsync(petId, name, status);
        }

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name="petId">Pet id to delete</param>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("pet/{petId}", Name = "deletePet")]
        public System.Threading.Tasks.Task DeletePet([Microsoft.AspNetCore.Mvc.FromHeader] string api_key, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long petId)
        {

            return _implementation.DeletePetAsync(api_key, petId);
        }

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet/{petId}/uploadImage", Name = "uploadFile")]
        public System.Threading.Tasks.Task<ApiResponse> UploadFile([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long petId, string additionalMetadata, FileParameter file)
        {

            return _implementation.UploadFileAsync(petId, additionalMetadata, file);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IStoreController
    {

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, int>> GetInventoryAsync();

        /// <summary>
        /// Place an order for a pet
        /// </summary>

        /// <param name="body">order placed for purchasing the pet</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Order> PlaceOrderAsync(Order body);

        /// <summary>
        /// Find purchase order by ID
        /// </summary>

        /// <param name="orderId">ID of pet that needs to be fetched</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<Order> GetOrderByIdAsync(long orderId);

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>

        /// <param name="orderId">ID of the order that needs to be deleted</param>

        System.Threading.Tasks.Task DeleteOrderAsync(long orderId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api/v1/")]

    public partial class StoreController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IStoreController _implementation;

        public StoreController(IStoreController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("store/inventory", Name = "getInventory")]
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, int>> GetInventory()
        {

            return _implementation.GetInventoryAsync();
        }

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name="body">order placed for purchasing the pet</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("store/order", Name = "placeOrder")]
        public System.Threading.Tasks.Task<Order> PlaceOrder([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Order body)
        {

            return _implementation.PlaceOrderAsync(body);
        }

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("store/order/{orderId}", Name = "getOrderById")]
        public System.Threading.Tasks.Task<Order> GetOrderById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long orderId)
        {

            return _implementation.GetOrderByIdAsync(orderId);
        }

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("store/order/{orderId}", Name = "deleteOrder")]
        public System.Threading.Tasks.Task DeleteOrder([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long orderId)
        {

            return _implementation.DeleteOrderAsync(orderId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IUserController
    {

        /// <summary>
        /// Create user
        /// </summary>

        /// <param name="body">Created user object</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task CreateUserAsync(User body);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>

        /// <param name="body">List of user object</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task CreateUsersWithArrayInputAsync(System.Collections.Generic.IEnumerable<User> body);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>

        /// <param name="body">List of user object</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task CreateUsersWithListInputAsync(System.Collections.Generic.IEnumerable<User> body);

        /// <summary>
        /// Logs user into the system
        /// </summary>

        /// <param name="username">The user name for login</param>

        /// <param name="password">The password for login in clear text</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<string> LoginUserAsync(string username, string password);

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task LogoutUserAsync();

        /// <summary>
        /// Get user by user name
        /// </summary>

        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>

        /// <returns>successful operation</returns>

        System.Threading.Tasks.Task<User> GetUserByNameAsync(string username);

        /// <summary>
        /// Updated user
        /// </summary>

        /// <param name="username">name that need to be updated</param>

        /// <param name="body">Updated user object</param>

        System.Threading.Tasks.Task UpdateUserAsync(string username, User body);

        /// <summary>
        /// Delete user
        /// </summary>

        /// <param name="username">The name that needs to be deleted</param>

        System.Threading.Tasks.Task DeleteUserAsync(string username);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api/v1/")]

    public partial class UserController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IUserController _implementation;

        public UserController(IUserController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Create user
        /// </summary>
        /// <param name="body">Created user object</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user", Name = "createUser")]
        public System.Threading.Tasks.Task CreateUser([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] User body)
        {

            return _implementation.CreateUserAsync(body);
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name="body">List of user object</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user/createWithArray", Name = "createUsersWithArrayInput")]
        public System.Threading.Tasks.Task CreateUsersWithArrayInput([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Collections.Generic.IEnumerable<User> body)
        {

            return _implementation.CreateUsersWithArrayInputAsync(body);
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name="body">List of user object</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user/createWithList", Name = "createUsersWithListInput")]
        public System.Threading.Tasks.Task CreateUsersWithListInput([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Collections.Generic.IEnumerable<User> body)
        {

            return _implementation.CreateUsersWithListInputAsync(body);
        }

        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/login", Name = "loginUser")]
        public System.Threading.Tasks.Task<string> LoginUser([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string password)
        {

            return _implementation.LoginUserAsync(username, password);
        }

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/logout", Name = "logoutUser")]
        public System.Threading.Tasks.Task LogoutUser()
        {

            return _implementation.LogoutUserAsync();
        }

        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/{username}", Name = "getUserByName")]
        public System.Threading.Tasks.Task<User> GetUserByName([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username)
        {

            return _implementation.GetUserByNameAsync(username);
        }

        /// <summary>
        /// Updated user
        /// </summary>
        /// <param name="username">name that need to be updated</param>
        /// <param name="body">Updated user object</param>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("user/{username}", Name = "updateUser")]
        public System.Threading.Tasks.Task UpdateUser([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, [Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] User body)
        {

            return _implementation.UpdateUserAsync(username, body);
        }

        /// <summary>
        /// Delete user
        /// </summary>
        /// <param name="username">The name that needs to be deleted</param>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("user/{username}", Name = "deleteUser")]
        public System.Threading.Tasks.Task DeleteUser([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username)
        {

            return _implementation.DeleteUserAsync(username);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Order
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("petId")]
        public long? PetId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shipDate")]
        public System.DateTimeOffset? ShipDate { get; set; }

        /// <summary>
        /// Order Status
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrderStatus? Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complete")]
        public bool? Complete { get; set; } = false;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Order FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Order>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Category
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Category FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Category>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string Username { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string Password { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// User Status
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("userStatus")]
        public int? UserStatus { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static User FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<User>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tag
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tag FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tag>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pet
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public Category Category { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("photoUrls")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<string> PhotoUrls { get; set; } = new System.Collections.Generic.List<string>();

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public System.Collections.Generic.List<Tag> Tags { get; set; }

        /// <summary>
        /// pet status in the store
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PetStatus? Status { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Pet FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Pet>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int? Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sold")]
        Sold = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"placed")]
        Placed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"approved")]
        Approved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
        Delivered = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PetStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sold")]
        Sold = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603